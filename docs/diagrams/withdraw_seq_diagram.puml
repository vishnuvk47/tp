@startuml WithdrawFunction
participant ":Parser"
participant ":AccountList"
participant ":Account"
participant ":TransactionList"
activate ":Parser"
":Parser" -> ":Parser":checkNegative()
activate ":Parser"
":Parser" --> ":Parser"
deactivate ":Parser"
":Parser" -> ":AccountList":withdrawMoney()
activate ":AccountList"
opt amt blank ||\namt negative ||\namt insufficient||\nexceed wl||\nfail save goal
":AccountList" --> ":Parser" : throws exception
end
":AccountList" -> ":Account":getMainAccount().\nsubtractBalance()
activate ":Account"
":Account" --> ":AccountList"
deactivate ":Account"
":AccountList" --> ":Parser"
deactivate ":AccountList"
":Parser" -> ":TransactionList":createTransaction()
activate ":TransactionList"
create ":Transaction"
":TransactionList" -> ":Transaction":new ":Transaction"()
activate ":Transaction"
":Transaction" --> ":TransactionList"
deactivate ":Transaction"
":TransactionList" -> ":TransactionList":add(transaction)
activate ":TransactionList"
":TransactionList" --> ":TransactionList"
deactivate ":TransactionList"
destroy ":Transaction"
":TransactionList" --> ":Parser"
deactivate ":TransactionList"
":Parser" -> ":AccountList":showBal()
activate ":AccountList"
":AccountList" -> ":Account":getMainAccount().\ngetAccountBalance()
activate ":Account"
":Account" --> ":AccountList"
deactivate ":Account"
":AccountList" -> ":Ui":showBal()
activate ":Ui"
":Ui" --> ":AccountList"
deactivate ":Ui"
":AccountList" --> ":Parser"
deactivate ":AccountList"

@enduml